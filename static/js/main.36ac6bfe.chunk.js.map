{"version":3,"sources":["logo.svg","components/GameBoard/Cell.js","components/GameBoard/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cell","getValue","props","value","isRevealed","isMine","neighbour","isFlagged","className","this","ref","onClick","onContextMenu","cMenu","Component","GameBoard","resetState","setState","boardData","initBoardData","height","width","mines","gameWon","mineCount","isGameOver","getRandomNumber","dimension","Math","floor","random","data","i","push","j","x","y","isEmpty","plantMines","getNeighbours","console","log","randomx","randomy","minesPlanted","updatedData","mine","traverseBoard","map","el","revealBoard","state","datarow","dataitem","revealEmpty","handleCellClick","win","getHidden","length","alert","getFlags","_handleContextMenu","e","preventDefault","mineArray","getMines","FlagArray","JSON","stringify","renderBoard","key","componentWillReceiveProps","nextProps","id","src","type","class","particlesOptions","particles","number","density","enable","value_area","App","params","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36ac6bfe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\r\n\r\nclass Cell extends Component{\r\n\tgetValue=()=>{\r\n\t\tif (!this.props.value.isRevealed){\r\n            return this.props.value.isFlagged ? \"ðŸš©\" : null;\r\n        }\r\n        if (this.props.value.isMine) {\r\n            return \"ðŸ’¥\";\r\n        }\r\n        if(this.props.value.neighbour === 0 ){\r\n            return null;\r\n        }\r\n        return this.props.value.neighbour;\r\n\r\n\t}\r\n\r\n\trender(){\r\n\t\tlet className = \"cell\" + (this.props.value.isRevealed ? \"\" : \" hidden\") + (this.props.value.isMine ? \" is-mine\" : \"\") + (this.props.value.isFlagged ? \" is-flag\" : \"\");\r\n\t\treturn (\r\n            <div ref=\"cell\" onClick={this.props.onClick} className={className} onContextMenu={this.props.cMenu}>\r\n                {this.getValue()}\r\n            </div>\r\n        );\r\n\r\n\t}\r\n}\r\nexport default Cell","import React,{Component} from 'react';\r\nimport Cell from './Cell'\r\nclass GameBoard extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state={\r\n\t\t\tboardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\r\n        \tgameWon: false,\r\n        \tmineCount: this.props.mines,\r\n            isGameOver:false\r\n\t\t}\r\n\t}\r\n\r\n resetState=()=>{\r\n    this.setState({\r\n            boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\r\n            gameWon: false,\r\n            mineCount: this.props.mines,\r\n            isGameOver:false\r\n\r\n    })\r\n }\r\n//plantMines\r\n // get mines\r\n    getMines(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (dataitem.isMine) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get Flags\r\n    getFlags(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (dataitem.isFlagged) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get Hidden cells\r\n    getHidden(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (!dataitem.isRevealed) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n// get random number given a dimension\r\n    getRandomNumber=(dimension)=>{\r\n        // return Math.floor(Math.random() * dimension);\r\n        return Math.floor((Math.random() * 1000) + 1) % dimension;\r\n    }\r\n\r\n\r\n// Gets initial board data\r\n    initBoardData=(height, width, mines)=> {\r\n        let data = [];\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            data.push([]);\r\n            for (let j = 0; j < width; j++) {\r\n                data[i][j] = {\r\n                    x: i,\r\n                    y: j,\r\n                    isMine: false,\r\n                    neighbour: 0,\r\n                    isRevealed: false,\r\n                    isEmpty: false,\r\n                    isFlagged: false,\r\n                };\r\n            }\r\n        }\r\n        data = this.plantMines(data, height, width, mines);\r\n        data = this.getNeighbours(data, height, width);\r\n        console.log(data);\r\n        return data;\r\n    }\r\n\r\n // plant mines on the board\r\n    plantMines=(data, height, width, mines)=> {\r\n        let randomx, randomy, minesPlanted = 0;\r\n\r\n        while (minesPlanted < mines) {\r\n            randomx = this.getRandomNumber(width);\r\n            randomy = this.getRandomNumber(height);\r\n            if (!(data[randomx][randomy].isMine)) {\r\n                data[randomx][randomy].isMine = true;\r\n                minesPlanted++;\r\n            }\r\n        }\r\n\r\n        return (data);\r\n    }\r\n\r\n // get number of neighbouring mines for each board cell\r\n    getNeighbours=(data, height, width)=> {\r\n        let updatedData = data, index = 0;\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            for (let j = 0; j < width; j++) {\r\n                if (data[i][j].isMine !== true) {\r\n                    let mine = 0;\r\n                    const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\r\n                    area.map(value => {\r\n                        if (value.isMine) {\r\n                            mine++;\r\n                        }\r\n                    });\r\n                    if (mine === 0) {\r\n                        updatedData[i][j].isEmpty = true;\r\n                    }\r\n                    updatedData[i][j].neighbour = mine;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (updatedData);\r\n    };\r\n\r\n // looks for neighbouring cells and returns them\r\n    traverseBoard=(x, y, data)=>{\r\n        const el = [];\r\n\r\n        //up\r\n        if (x > 0) {\r\n            el.push(data[x - 1][y]);\r\n        }\r\n\r\n        //down\r\n        if (x < this.props.height - 1) {\r\n            el.push(data[x + 1][y]);\r\n        }\r\n\r\n        //left\r\n        if (y > 0) {\r\n            el.push(data[x][y - 1]);\r\n        }\r\n\r\n        //right\r\n        if (y < this.props.width - 1) {\r\n            el.push(data[x][y + 1]);\r\n        }\r\n\r\n        // top left\r\n        if (x > 0 && y > 0) {\r\n            el.push(data[x - 1][y - 1]);\r\n        }\r\n\r\n        // top right\r\n        if (x > 0 && y < this.props.width - 1) {\r\n            el.push(data[x - 1][y + 1]);\r\n        }\r\n\r\n        // bottom right\r\n        if (x < this.props.height - 1 && y < this.props.width - 1) {\r\n            el.push(data[x + 1][y + 1]);\r\n        }\r\n\r\n        // bottom left\r\n        if (x < this.props.height - 1 && y > 0) {\r\n            el.push(data[x + 1][y - 1]);\r\n        }\r\n\r\n        return el;\r\n    }\r\n// reveals the whole board\r\n    revealBoard=()=> {\r\n        let updatedData = this.state.boardData;\r\n        updatedData.map((datarow) => {\r\n            datarow.map((dataitem) => {\r\n                dataitem.isRevealed = true;\r\n            });\r\n        });\r\n        this.setState({\r\n            boardData: updatedData\r\n        })\r\n    }\r\n /* reveal logic for empty cell */\r\n    revealEmpty=(x, y, data)=> {\r\n        let area = this.traverseBoard(x, y, data);\r\n        area.map(value => {\r\n            if (!value.isRevealed && (value.isEmpty || !value.isMine)) {\r\n                data[value.x][value.y].isRevealed = true;\r\n                if (value.isEmpty) {\r\n                    this.revealEmpty(value.x, value.y, data);\r\n                }\r\n            }\r\n        });\r\n        return data;\r\n\r\n    }\r\n     // Handle User Events\r\n\r\n    handleCellClick=(x, y)=> {\r\n        let win = false;\r\n\r\n        // check if revealed. return if true.\r\n        if (this.state.boardData[x][y].isRevealed) return null;\r\n\r\n        // check if mine. game over if true\r\n        if (this.state.boardData[x][y].isMine) {\r\n            this.revealBoard();\r\n            this.setState({isGameOver:true})\r\n        }\r\n\r\n        let updatedData = this.state.boardData;\r\n        updatedData[x][y].isFlagged = false;\r\n        updatedData[x][y].isRevealed = true;\r\n\r\n        if (updatedData[x][y].isEmpty) {\r\n            updatedData = this.revealEmpty(x, y, updatedData);\r\n        }\r\n\r\n        if (this.getHidden(updatedData).length === this.props.mines) {\r\n            win = true;\r\n            this.revealBoard();\r\n            alert(\"You Win\");\r\n        }\r\n\r\n        this.setState({\r\n            boardData: updatedData,\r\n            mineCount: this.props.mines - this.getFlags(updatedData).length,\r\n            gameWon: win,\r\n        });\r\n    }\r\n\r\n    _handleContextMenu=(e, x, y)=> {\r\n        e.preventDefault();\r\n        let updatedData = this.state.boardData;\r\n        let mines = this.state.mineCount;\r\n        let win = false;\r\n\r\n        // check if already revealed\r\n        if (updatedData[x][y].isRevealed) return;\r\n\r\n        if (updatedData[x][y].isFlagged) {\r\n            updatedData[x][y].isFlagged = false;\r\n            mines++;\r\n        } else {\r\n            updatedData[x][y].isFlagged = true;\r\n            mines--;\r\n        }\r\n\r\n        if (mines === 0) {\r\n            const mineArray = this.getMines(updatedData);\r\n            const FlagArray = this.getFlags(updatedData);\r\n            win = (JSON.stringify(mineArray) === JSON.stringify(FlagArray));\r\n            if (win) {\r\n                this.revealBoard();\r\n                alert(\"You Win\");\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            boardData: updatedData,\r\n            mineCount: mines,\r\n            gameWon: win,\r\n        });\r\n    }\r\n\r\n    renderBoard=(data)=> {\r\n        return data.map((datarow) => {\r\n            return datarow.map((dataitem) => {\r\n                return (\r\n                    <div key={dataitem.x * datarow.length + dataitem.y}>\r\n                        <Cell\r\n                            className=\"grow\"\r\n                            onClick={() => this.handleCellClick(dataitem.x, dataitem.y)}\r\n                            cMenu={(e) => this._handleContextMenu(e, dataitem.x, dataitem.y)}\r\n                            value={dataitem}\r\n                        />\r\n                        {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\r\n                    </div>);\r\n            })\r\n        });\r\n\r\n    }\r\n    // Component methods\r\n    componentWillReceiveProps=(nextProps)=> {\r\n        if (JSON.stringify(this.props) !== JSON.stringify(nextProps)) {\r\n            this.setState({\r\n                boardData: this.initBoardData(nextProps.height, nextProps.width, nextProps.mines),\r\n                gameWon: false,\r\n                mineCount: nextProps.mines,\r\n            });\r\n        }\r\n    }\r\n\r\n\trender(){\r\n\r\n\t\treturn(\r\n\t\t\t<div>\r\n                <audio id=\"myAudio\">\r\n                    <source src=\"./Explosion+3.ogg\" type=\"audio/ogg\"/>\r\n                    <source src=\"./Explosion+3.mp3\" type=\"audio/mpeg\"/>\r\n                    Your browser does not support the audio element.\r\n                </audio>\r\n            <div className=\"game-info tc\">\r\n            <article class=\"br2 ba dark-gray b--black-10 mv4 w-100 w-100-m w-25-l mw8 center shadow-5 fw8\">    \r\n                    {\r\n                    !this.state.isGameOver ?\r\n                    <div>\r\n                        <span className=\"ttu\">mines</span><br/>\r\n                        <span className=\"f2\">{this.state.mineCount}</span> \r\n                        <br/>       \r\n                        <span className=\"f2\">{this.state.gameWon ? \"You Win\" : \"\"}</span>    \r\n                    </div>\r\n                    :\r\n                    <div>\r\n                    <span className=\"ttu\">GMAE OVER RESET TO PLAY</span><br/>\r\n                    </div>\r\n                    }\r\n                    \r\n            </article>        \r\n            </div> \r\n            <article class=\"br2 ba dark-gray b--black-10 mv4 w-100 w-100-m w-25-l mw8 center shadow-5\">\r\n\t\t\t{this.renderBoard(this.state.boardData)}\r\n            </article>  \r\n                <div class=\"tc mt3\">\r\n\r\n      <button class=\"black pv2 ph3 bg-transparent ba b--black hover-bg-black hover-white mw10 w-100 w-100-m w-25-l mw8 center shadow-5\" onClick={this.resetState}>\r\n        RESET GAME\r\n      </button>\r\n\r\n    </div>  \t\r\n\t\t\t</div>\r\n\t\t\t)\t\t\r\n\t}\r\n}\r\nexport default GameBoard","import React,{Component} from 'react';\nimport logo from './logo.svg';\nimport Particles from 'react-particles-js';\nimport GameBoard from './components/GameBoard/GameBoard'\nimport './App.css';\nimport 'tachyons'\nconst particlesOptions={\n  particles: {\n                  number:{\n                  value:100,\n                  density:{\n                    enable:true,\n                    value_area:900\n                  }\n                  }\n                }\n}\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state={\n        height:8,\n        width:8,\n        mines:10,\n    }\n  }\n\n  render(){\n    return(\n      <div>\n\n      <audio id=\"myAudio\">\n        <source src=\"horse.ogg\" type=\"audio/ogg\"/>\n        <source src=\"horse.mp3\" type=\"audio/mpeg\"/>\n        Your browser does not support the audio element.\n      </audio>\n\n           <Particles className=\"particles\"\n                params={particlesOptions} />\n        <h1 className='f1 tc'>minesweeper</h1>\n        \n          <div class=\"boardStyle\">\n              <GameBoard height={this.state.height} width={this.state.width} mines={this.state.mines} />\n          </div>\n        \n\n      </div>\n      \n      )\n  }\n\n\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}